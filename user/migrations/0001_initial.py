# Generated by Django 3.1.3 on 2020-12-18 05:24

from __future__ import absolute_import

import dirtyfields.dirtyfields
import django.contrib.auth.password_validation
from django.db import migrations, models

import paytime.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("firstname", models.CharField(max_length=30)),
                ("lastname", models.CharField(max_length=30)),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with this email already exists"
                        },
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "password",
                    models.CharField(
                        max_length=128,
                        validators=[
                            django.contrib.auth.password_validation.validate_password
                        ],
                    ),
                ),
                (
                    "mobile",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        validators=[paytime.utils.validate_ng_mobile_number],
                    ),
                ),
                ("address1", models.CharField(blank=True, max_length=30, null=True)),
                ("area", models.CharField(blank=True, max_length=30, null=True)),
                ("city", models.CharField(blank=True, max_length=30, null=True)),
                ("state", models.CharField(blank=True, max_length=30, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("created_at", models.DateField(auto_now_add=True)),
                ("updated_at", models.DateField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
    ]
